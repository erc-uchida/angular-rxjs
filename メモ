Observable
    値やイベントのコレクション

Observer
    コールバックのコレクション
        イベントが来た時に何かするコールバックをためておく

Subscription
    Observableの実行
    実行のキャンセルも担う

Operators
    コレクションの操作

Subject
    EventEmitterと同等
    値やイベントを複数のObserversにマルチキャストする

Schedulers
    同時実行制御のディスパッチャ

------------------------------------------------

Consumer <- (data) <- Producer

> Pull
Consumer Active
Producer Passive
-> Every JavaScript Function, iterator

> Push
Consumer Passive
Producer Active
-> Promise, Observable(RxJS)

------------------------------------------------

Core Observable concerns:

- Creating Observables
- Subscribing to Observables
- Executing the Observable
- Disposing Observables

## Creating Observables
Rx.Observable.create is an alias for the Observable constructor, and it takes one argument: the subscribe function.

the subscribe function is the most important piece

## Subscribing to Observables

The Observable does not even maintain a list of attached Observers.

## Executing Observables

There are three types of values an Observable Execution can deliver:

- "Next" notification: sends a value such as a Number, a String, an Object, etc.
- "Error" notification: sends a JavaScript Error or exception.
- "Complete" notification: does not send a value.

## Disposing Observable Executions

Because Observable Executions may be infinite, and it's common for an Observer to want to abort execution in finite time, 
we need an API for canceling an execution.
You can do that by returning a custom unsubscribe function from within function subscribe().

------------------------------------------------

Observer

Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.

you may also just provide the callbacks as arguments, without being attached to an Observer object

------------------------------------------------

Subscription

A Subscription essentially just has an unsubscribe() function to release resources or cancel Observable executions.

Subscriptions can also be put together, so that a call to an unsubscribe() of one Subscription may unsubscribe multiple Subscriptions.
Subscriptions also have a remove(otherSubscription) method, in order to undo the addition of a child Subscription.

------------------------------------------------

Subject

A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.

------------------------------------------------

Multicasted Observables

A multicasted Observable uses a Subject under the hood to make multiple Observers see the same Observable execution.

refCount makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.

------------------------------------------------

BehaviorSubject

BehaviorSubjects are useful for representing "values over time". For instance, an event stream of birthdays is a Subject, but the stream of a person's age would be a BehaviorSubject.

------------------------------------------------

ReplaySubject

A ReplaySubject records multiple values from the Observable execution and replays them to new subscribers.

------------------------------------------------

AsyncSubject

The AsyncSubject is a variant where only the last value of the Observable execution is sent to its observers, and only when the execution completes.

The AsyncSubject is similar to the last() operator, in that it waits for the complete notification in order to deliver a single value.

------------------------------------------------

# Scheduler

A scheduler controls when a subscription starts and when notifications are delivered. It consists of three components.

A Scheduler is a data structure.
    It knows how to store and queue tasks based on priority or other criteria.
A Scheduler is an execution context.
    It denotes where and when the task is executed (e.g. immediately, or in another callback mechanism such as setTimeout or process.nextTick, or the animation frame).
A Scheduler has a (virtual) clock.
    It provides a notion of "time" by a getter method now() on the scheduler. Tasks being scheduled on a particular scheduler will adhere only to the time denoted by that clock.

A Scheduler lets you define in what execution context will an Observable deliver notifications to its Observer.

This is specially useful in testing, where a virtual time Scheduler may be used to fake wall-clock time while in reality executing scheduled tasks synchronously.

## Scheduler Types
- null
- Rx.Scheduler.queue
- Rx.Scheduler.asap
- Rx.Scheduler.async

## Using Schedulers
Because RxJS uses the least concurrency scheduler, you can pick a different scheduler if you want to introduce concurrency for performance purpose. 

Static creation operators usually take a Scheduler as argument. 

Use subscribeOn to schedule in what context will the subscribe() call happen.
Use observeOn to schedule in what context will notifications be delivered.
Instance operators may take a Scheduler as argument.

