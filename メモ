Observable
    値やイベントのコレクション

Observer
    コールバックのコレクション
        イベントが来た時に何かするコールバックをためておく

Subscription
    Observableの実行
    実行のキャンセルも担う

Operators
    コレクションの操作

Subject
    EventEmitterと同等
    値やイベントを複数のObserversにマルチキャストする

Schedulers
    同時実行制御のディスパッチャ

------------------------------------------------

Consumer <- (data) <- Producer

> Pull
Consumer Active
Producer Passive
-> Every JavaScript Function, iterator

> Push
Consumer Passive
Producer Active
-> Promise, Observable(RxJS)

------------------------------------------------

Core Observable concerns:

- Creating Observables
- Subscribing to Observables
- Executing the Observable
- Disposing Observables

## Creating Observables
Rx.Observable.create is an alias for the Observable constructor, and it takes one argument: the subscribe function.

the subscribe function is the most important piece

## Subscribing to Observables

The Observable does not even maintain a list of attached Observers.

## Executing Observables

There are three types of values an Observable Execution can deliver:

- "Next" notification: sends a value such as a Number, a String, an Object, etc.
- "Error" notification: sends a JavaScript Error or exception.
- "Complete" notification: does not send a value.

## Disposing Observable Executions

Because Observable Executions may be infinite, and it's common for an Observer to want to abort execution in finite time, 
we need an API for canceling an execution.
You can do that by returning a custom unsubscribe function from within function subscribe().

------------------------------------------------

Observer

Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.

you may also just provide the callbacks as arguments, without being attached to an Observer object


